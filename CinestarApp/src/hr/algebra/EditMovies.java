/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hr.algebra;
import hr.algebra.dal.Repository;
import hr.algebra.dal.RepositoryFactory;
import hr.algebra.model.Actor;
import hr.algebra.model.Director;
import hr.algebra.model.Movie;
import hr.algebra.model.MovieTableModel;
import hr.algebra.utils.FileUtils;
import hr.algebra.utils.IconUtils;
import hr.algebra.utils.MessageUtils;
import java.io.File;
import java.io.IOException;
import java.net.URISyntaxException;
import java.net.URL;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Optional;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.JTextComponent;

/**
 *
 * @author Mladen
 */
public class EditMovies extends javax.swing.JPanel {

    private static final String PICTURE_PATH = "assets/no_imagepng.png";
    private static final String POSTER_WIDTH = "200";
    private static final String POSTER_HEIGHT = "200";
    private static final Random RANDOM = new Random();
    private static final String DIR = "assets";

    private static List<JTextComponent> validationFields;
    private static List<JLabel> errorLabels;
    private static Repository repository;
    private Movie selectedMovie;
    private MovieTableModel movieTableModel;
    public static List<Movie> movieList = new ArrayList<>();
    

    /**
     * Creates new form EditMovies
     */
    public EditMovies() {
        initComponents();
        initSetup();
        //this.mainFrame = mainFrame;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        tfTitle = new javax.swing.JTextField();
        lbTitleError = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        tfGenre = new javax.swing.JTextField();
        lbGenreError = new javax.swing.JLabel();
        tfDuration = new javax.swing.JTextField();
        lbDurationError = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        tfDirector = new javax.swing.JTextField();
        lbDirectorError = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        tfPublishedDate = new javax.swing.JTextField();
        lbPublishedDateError = new javax.swing.JLabel();
        tfLink = new javax.swing.JTextField();
        lbLinkError = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        tfStartDate = new javax.swing.JTextField();
        lbStartDateError = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        lbPoster = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        taDescription = new javax.swing.JTextArea();
        jLabel8 = new javax.swing.JLabel();
        tfPosterPath = new javax.swing.JTextField();
        btnChoose = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tbMovies = new javax.swing.JTable();
        btnUpdate = new javax.swing.JButton();
        btnAdd = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        tfOriginalTitle = new javax.swing.JTextField();
        lbOriginalTitleError = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        btnClear = new javax.swing.JButton();
        lbDescriptionError = new javax.swing.JLabel();

        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        jLabel1.setText("Title:");

        lbTitleError.setForeground(new java.awt.Color(153, 0, 0));

        jLabel2.setText("Genre:");

        lbGenreError.setForeground(new java.awt.Color(153, 0, 0));

        lbDurationError.setForeground(new java.awt.Color(153, 0, 0));

        jLabel3.setText("Duration:");

        lbDirectorError.setForeground(new java.awt.Color(153, 0, 0));

        jLabel4.setText("Director:");

        lbPublishedDateError.setForeground(new java.awt.Color(153, 0, 0));

        lbLinkError.setForeground(new java.awt.Color(153, 0, 0));

        jLabel5.setText("Link:");

        jLabel6.setText("Start Date:");

        lbStartDateError.setForeground(new java.awt.Color(153, 0, 0));

        jLabel7.setText("Published Date:");

        lbPoster.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/no_imagepng.png"))); // NOI18N

        taDescription.setColumns(20);
        taDescription.setLineWrap(true);
        taDescription.setRows(5);
        jScrollPane1.setViewportView(taDescription);

        jLabel8.setText("Description:");

        tfPosterPath.setEditable(false);

        btnChoose.setText("Choose");
        btnChoose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChooseActionPerformed(evt);
            }
        });

        tbMovies.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tbMovies.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbMoviesMouseClicked(evt);
            }
        });
        tbMovies.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tbMoviesKeyReleased(evt);
            }
        });
        jScrollPane2.setViewportView(tbMovies);

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnDelete.setBackground(new java.awt.Color(204, 0, 0));
        btnDelete.setForeground(new java.awt.Color(0, 0, 0));
        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        lbOriginalTitleError.setForeground(new java.awt.Color(153, 0, 0));

        jLabel9.setText("Original title:");

        btnClear.setText("Clear form");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        lbDescriptionError.setForeground(new java.awt.Color(153, 0, 0));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(tfTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lbTitleError, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(tfGenre, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lbGenreError, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(tfDuration, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lbDurationError, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(tfDirector, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lbDirectorError, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(tfOriginalTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lbOriginalTitleError, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(tfStartDate, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lbStartDateError, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(tfPublishedDate, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lbPublishedDateError, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(tfLink, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lbLinkError, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lbDescriptionError, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel8))
                        .addGap(0, 100, Short.MAX_VALUE))
                    .addComponent(jScrollPane2))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(tfPosterPath, javax.swing.GroupLayout.PREFERRED_SIZE, 318, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnChoose)
                                .addGap(136, 136, 136))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lbPoster, javax.swing.GroupLayout.PREFERRED_SIZE, 318, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(72, 72, 72)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(btnAdd, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 123, Short.MAX_VALUE)
                                    .addComponent(btnClear, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 123, Short.MAX_VALUE)
                                    .addComponent(btnUpdate, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lbPoster, javax.swing.GroupLayout.PREFERRED_SIZE, 305, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfPosterPath, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnChoose)
                        .addGap(54, 54, 54)
                        .addComponent(btnClear)
                        .addGap(58, 58, 58)
                        .addComponent(btnAdd)
                        .addGap(57, 57, 57)
                        .addComponent(btnUpdate)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(tfStartDate, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lbStartDateError, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(tfPublishedDate, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lbPublishedDateError, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(tfLink, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lbLinkError, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(14, 14, 14)
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lbDescriptionError, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(tfTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lbTitleError, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(tfGenre, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lbGenreError, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(tfDuration, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lbDurationError, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lbDirectorError, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(tfDirector, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lbOriginalTitleError, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(tfOriginalTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 408, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(42, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnChooseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChooseActionPerformed
        
        File file = FileUtils.uploadNonOptionalFile("Images", "jpg", "jpeg", "png");
        if (file == null) {
            return;
        }
        tfPosterPath.setText(file.getAbsolutePath());
        setPoster(lbPoster, file);

        
        /*try {
            Optional<File> image = FileUtils.uploadFile("Images", "jpg", "jpeg", "png");
            if (!image.isPresent()) {
                return;
            }
        } catch (Exception e) {
            MessageUtils.showErrorMessage("Error", "Cannot upload poster image.");
        }*/
        
    }//GEN-LAST:event_btnChooseActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        if (formValid() && selectedMovie == null) {
            try {
                String posterPath = uploadPoster();
                Movie movie = new Movie(tfTitle.getText().trim(),
                        LocalDateTime.parse(tfPublishedDate.getText().trim(), DateTimeFormatter.ISO_DATE_TIME),
                        taDescription.getText().trim(),
                        tfOriginalTitle.getText().trim(),
                        createNewDirector(tfDirector.getText().trim()),
                        Integer.parseInt(tfDuration.getText().trim()),
                        tfGenre.getText().trim(),
                        posterPath,
                        tfLink.getText().trim(),
                        LocalDateTime.parse(tfStartDate.getText().trim(), DateTimeFormatter.ISO_DATE_TIME),
                        new ArrayList<>(Collections.<Actor>emptyList())
                );

                repository.createMovie(movie);
                movieList.add(movie);
                movieTableModel.setMovies(repository.selectMovies());

                clearForm();
                tbMovies.setModel(movieTableModel);
            } catch (Exception e) {
                e.printStackTrace();
                MessageUtils.showErrorMessage("Error", "Add button broken");
            }
        }
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        if (selectedMovie == null) {
            MessageUtils.showInformationMessage("No data", "Please select a movie to update");
            return;
        }
        if (formValid()) {
            try {
                if (selectedMovie.getPoster() == null || !tfPosterPath.getText().trim().equals(selectedMovie.getPoster())) {
                    Files.deleteIfExists(Paths.get(selectedMovie.getPoster()));
                    String posterPath = uploadPoster();
                    selectedMovie.setPoster(posterPath);
                }
                selectedMovie.setTitle(tfTitle.getText().trim());
                selectedMovie.setPublishedDate(LocalDateTime.parse(tfPublishedDate.getText().trim(), Movie.DATE_TIME_FORMATTER));
                selectedMovie.setDescription(taDescription.getText().trim());
                selectedMovie.setOriginalTitle(tfOriginalTitle.getText().trim());
                //selectedMovie.setStartDate(LocalDateTime.parse(tfStartDate.getText().trim(), Movie.DATE_TIME_FORMATTER));
                selectedMovie.setDirector(createNewDirector(tfDirector.getText().trim()));
                selectedMovie.setDuration(Integer.parseInt(tfDuration.getText().trim()));
                selectedMovie.setGenre(tfGenre.getText().trim());
                repository.updateMovie(selectedMovie.getId(), selectedMovie);
                movieTableModel.setMovies(repository.selectMovies());
                clearForm();
            } catch (Exception e) {
                e.printStackTrace();
                MessageUtils.showErrorMessage("Error", "Unable to update movie.");
            }
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
         if (selectedMovie == null) {
            MessageUtils.showInformationMessage("No data", "Please select a movie to delete");
            return;
        }
         if (MessageUtils.showConfirmDialog("Delete movie", "Are you sure you want to delete the selected movie?") == JOptionPane.YES_OPTION) {
             try {
                 Files.deleteIfExists(Paths.get(selectedMovie.getPoster()));
                 repository.removeMovie(selectedMovie.getId());
                 repository.deleteMovie(selectedMovie.getId());
                 movieTableModel.setMovies(repository.selectMovies());
                 clearForm();
             } catch (Exception e) {
                 e.printStackTrace();
                 MessageUtils.showErrorMessage("Error", "Unable to delete movie.");
             }
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void tbMoviesKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tbMoviesKeyReleased
        showMovie();
    }//GEN-LAST:event_tbMoviesKeyReleased

    private void tbMoviesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbMoviesMouseClicked
        showMovie();
    }//GEN-LAST:event_tbMoviesMouseClicked

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        selectedMovie = null;
        try {
            clearForm();
        } catch (Exception e) {
            MessageUtils.showErrorMessage("Error", "Cannot clear form");
        }
    }//GEN-LAST:event_btnClearActionPerformed

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        initSetup();
    }//GEN-LAST:event_formComponentShown


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnChoose;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lbDescriptionError;
    private javax.swing.JLabel lbDirectorError;
    private javax.swing.JLabel lbDurationError;
    private javax.swing.JLabel lbGenreError;
    private javax.swing.JLabel lbLinkError;
    private javax.swing.JLabel lbOriginalTitleError;
    private javax.swing.JLabel lbPoster;
    private javax.swing.JLabel lbPublishedDateError;
    private javax.swing.JLabel lbStartDateError;
    private javax.swing.JLabel lbTitleError;
    private javax.swing.JTextArea taDescription;
    private javax.swing.JTable tbMovies;
    private javax.swing.JTextField tfDirector;
    private javax.swing.JTextField tfDuration;
    private javax.swing.JTextField tfGenre;
    private javax.swing.JTextField tfLink;
    private javax.swing.JTextField tfOriginalTitle;
    private javax.swing.JTextField tfPosterPath;
    private javax.swing.JTextField tfPublishedDate;
    private javax.swing.JTextField tfStartDate;
    private javax.swing.JTextField tfTitle;
    // End of variables declaration//GEN-END:variables

    private void initSetup() {

        try {
            initFields();
            initRepository();
            initTable();
            setPoster(lbPoster, getPicture());
        } catch (Exception ex) {
            MessageUtils.showErrorMessage("Error", "Cannot init table in edit tab");
            Logger.getLogger(EditMovies.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private void initFields() {
        validationFields = Arrays.asList(tfTitle, tfGenre, tfDuration, tfDirector, tfOriginalTitle, tfStartDate, tfPublishedDate, tfLink, taDescription);
        errorLabels = Arrays.asList(lbDirectorError, lbDurationError, lbGenreError, lbOriginalTitleError, lbLinkError, lbStartDateError, lbTitleError, lbPublishedDateError,lbDescriptionError);
    }

    private void initRepository() {
        repository = RepositoryFactory.getRepository();
    }

    private void initTable() throws Exception {
        tbMovies.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        tbMovies.setAutoCreateRowSorter(true);
        tbMovies.setRowHeight(25);
        List<Movie> movies = repository.selectMovies();

        if (movies.size() > 0) {
            movieTableModel = new MovieTableModel(movies);
            movieList.addAll(movies);
            tbMovies.setModel(movieTableModel);
        } else {
            DefaultTableModel defaultModel = new DefaultTableModel();
            defaultModel.setRowCount(0);
            tbMovies.setModel(defaultModel);
        }

    }

    private boolean formValid() {
        boolean ok = true;

        for (int i = 0; i < validationFields.size(); i++) {
            ok &= !validationFields.get(i).getText().trim().isEmpty();
            errorLabels.get(i).setText(validationFields.get(i).getText().trim().isEmpty() ? "X" : "");

            if ("PublishedDate".equals(validationFields.get(i).getText().trim()) || "StartDate".equals(validationFields.get(i).getText().trim())) {
                try {
                    LocalDateTime.parse(validationFields.get(i).getText().trim(), DateTimeFormatter.ISO_DATE_TIME);
                errorLabels.get(i).setText("");
                } catch (Exception e) {
                    ok = false;
                    errorLabels.get(i).setText("X");
                }
            }
        }

        return ok;
    }

    private String uploadPoster() throws IOException {
        String posterUrl = tfPosterPath.getText();
        String ext = posterUrl.substring(posterUrl.lastIndexOf("."));
        String posterName = Math.abs(RANDOM.nextInt()) + ext;
        String posterPath = DIR + File.separator + posterName;
        
        FileUtils.copy(posterUrl, posterPath);
        return posterPath;
    }

    private void clearForm() throws URISyntaxException {
        validationFields.forEach(e -> e.setText(""));
        errorLabels.forEach(e -> e.setText(""));
        lbPoster.setText("");
        tfPosterPath.setText("");
        setPoster(lbPoster, getPicture());
    }

    private Director createNewDirector(String data) {
        String[] details = data.trim().split(" ");

        return new Director(details[0], details[1]);
    }

    private File getPicture() throws URISyntaxException {
        URL res = getClass().getClassLoader().getResource(PICTURE_PATH);
        return Paths.get(res.toURI()).toFile();
    }

    private void setPoster(JLabel lbPoster, File file) {
        try {
            
            lbPoster.setIcon(IconUtils.createIcon(file.getAbsolutePath(), Integer.parseInt(POSTER_WIDTH), Integer.parseInt(POSTER_HEIGHT)));
        } catch (Exception e) {
            e.printStackTrace();
            MessageUtils.showErrorMessage("Error", "Could not set poster image");
        }
    }

    private void showMovie() {
        int selectedRow = tbMovies.getSelectedRow();
        int rowIndex = tbMovies.convertRowIndexToModel(selectedRow);
        int selectedMovieId = (int) movieTableModel.getValueAt(rowIndex, 0);
        errorLabels.forEach(e -> e.setText(""));
        
        try {
            Optional<Movie> movie = repository.selectMovie(selectedMovieId);
            if (movie.isPresent()) {
                selectedMovie = movie.get();
                showMovieData(selectedMovie);
            }
            tfTitle.requestFocus();
        } catch (Exception e) {
            MessageUtils.showErrorMessage("Error", "showMovie()");
        }
    }

    private void showMovieData(Movie movie) throws URISyntaxException {
        tfTitle.setText(movie.getTitle());
        tfPublishedDate.setText(movie.getPublishedDate().format(Movie.DATE_TIME_FORMATTER));
        tfOriginalTitle.setText(movie.getOriginalTitle());
        tfStartDate.setText(movie.getStartDate().format(Movie.DATE_TIME_FORMATTER));
        tfDuration.setText(String.valueOf(movie.getDuration()));
        tfLink.setText(movie.getLink());
        tfDirector.setText(movie.getDirector().toString());
        taDescription.setText(movie.getDescription());
        tfGenre.setText(movie.getGenre());
        //tfPosterPath.setText(movie.getPoster());
        
        if (movie.getPoster() !=null && Files.exists(Paths.get(movie.getPoster()))) {
            tfPosterPath.setText(movie.getPoster());
            setPoster(lbPoster, new File(movie.getPoster()));
        }else{
            setPoster(lbPoster, getPicture());
            tfPosterPath.setText("");
        }
    }

    
}
